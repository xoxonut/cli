// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: twopcserver.proto

package twopcserver

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TwoPhaseCommitServiceClient is the client API for TwoPhaseCommitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwoPhaseCommitServiceClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*Response, error)
	ReadAccount(ctx context.Context, in *ReadAccountRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Response, error)
	BeginTransaction(ctx context.Context, in *BeginTransactionRequest, opts ...grpc.CallOption) (*Response, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*Response, error)
	Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*Response, error)
	Reset(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error)
}

type twoPhaseCommitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTwoPhaseCommitServiceClient(cc grpc.ClientConnInterface) TwoPhaseCommitServiceClient {
	return &twoPhaseCommitServiceClient{cc}
}

func (c *twoPhaseCommitServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/twopcserver.TwoPhaseCommitService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPhaseCommitServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/twopcserver.TwoPhaseCommitService/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPhaseCommitServiceClient) ReadAccount(ctx context.Context, in *ReadAccountRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/twopcserver.TwoPhaseCommitService/ReadAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPhaseCommitServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/twopcserver.TwoPhaseCommitService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPhaseCommitServiceClient) BeginTransaction(ctx context.Context, in *BeginTransactionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/twopcserver.TwoPhaseCommitService/BeginTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPhaseCommitServiceClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/twopcserver.TwoPhaseCommitService/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPhaseCommitServiceClient) Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/twopcserver.TwoPhaseCommitService/Abort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPhaseCommitServiceClient) Reset(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/twopcserver.TwoPhaseCommitService/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwoPhaseCommitServiceServer is the server API for TwoPhaseCommitService service.
// All implementations must embed UnimplementedTwoPhaseCommitServiceServer
// for forward compatibility
type TwoPhaseCommitServiceServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*Response, error)
	DeleteAccount(context.Context, *DeleteAccountRequest) (*Response, error)
	ReadAccount(context.Context, *ReadAccountRequest) (*Response, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*Response, error)
	BeginTransaction(context.Context, *BeginTransactionRequest) (*Response, error)
	Commit(context.Context, *CommitRequest) (*Response, error)
	Abort(context.Context, *AbortRequest) (*Response, error)
	Reset(context.Context, *empty.Empty) (*Response, error)
	mustEmbedUnimplementedTwoPhaseCommitServiceServer()
}

// UnimplementedTwoPhaseCommitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTwoPhaseCommitServiceServer struct {
}

func (UnimplementedTwoPhaseCommitServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedTwoPhaseCommitServiceServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedTwoPhaseCommitServiceServer) ReadAccount(context.Context, *ReadAccountRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAccount not implemented")
}
func (UnimplementedTwoPhaseCommitServiceServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedTwoPhaseCommitServiceServer) BeginTransaction(context.Context, *BeginTransactionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginTransaction not implemented")
}
func (UnimplementedTwoPhaseCommitServiceServer) Commit(context.Context, *CommitRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedTwoPhaseCommitServiceServer) Abort(context.Context, *AbortRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedTwoPhaseCommitServiceServer) Reset(context.Context, *empty.Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedTwoPhaseCommitServiceServer) mustEmbedUnimplementedTwoPhaseCommitServiceServer() {}

// UnsafeTwoPhaseCommitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwoPhaseCommitServiceServer will
// result in compilation errors.
type UnsafeTwoPhaseCommitServiceServer interface {
	mustEmbedUnimplementedTwoPhaseCommitServiceServer()
}

func RegisterTwoPhaseCommitServiceServer(s grpc.ServiceRegistrar, srv TwoPhaseCommitServiceServer) {
	s.RegisterService(&TwoPhaseCommitService_ServiceDesc, srv)
}

func _TwoPhaseCommitService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twopcserver.TwoPhaseCommitService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPhaseCommitService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twopcserver.TwoPhaseCommitService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServiceServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPhaseCommitService_ReadAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServiceServer).ReadAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twopcserver.TwoPhaseCommitService/ReadAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServiceServer).ReadAccount(ctx, req.(*ReadAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPhaseCommitService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twopcserver.TwoPhaseCommitService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServiceServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPhaseCommitService_BeginTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServiceServer).BeginTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twopcserver.TwoPhaseCommitService/BeginTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServiceServer).BeginTransaction(ctx, req.(*BeginTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPhaseCommitService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twopcserver.TwoPhaseCommitService/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServiceServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPhaseCommitService_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServiceServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twopcserver.TwoPhaseCommitService/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServiceServer).Abort(ctx, req.(*AbortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPhaseCommitService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twopcserver.TwoPhaseCommitService/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServiceServer).Reset(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TwoPhaseCommitService_ServiceDesc is the grpc.ServiceDesc for TwoPhaseCommitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwoPhaseCommitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "twopcserver.TwoPhaseCommitService",
	HandlerType: (*TwoPhaseCommitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _TwoPhaseCommitService_CreateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _TwoPhaseCommitService_DeleteAccount_Handler,
		},
		{
			MethodName: "ReadAccount",
			Handler:    _TwoPhaseCommitService_ReadAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _TwoPhaseCommitService_UpdateAccount_Handler,
		},
		{
			MethodName: "BeginTransaction",
			Handler:    _TwoPhaseCommitService_BeginTransaction_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _TwoPhaseCommitService_Commit_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _TwoPhaseCommitService_Abort_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _TwoPhaseCommitService_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "twopcserver.proto",
}
